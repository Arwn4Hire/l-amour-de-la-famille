{"ast":null,"code":"export const create = async (userId, token, post) => {\n  try {\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/post/new/${userId}`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: post\n    });\n    return response.json();\n  } catch (err) {\n    return console.log(err);\n  }\n};\nexport const list = async () => {\n  try {\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/posts`, {\n      method: \"GET\"\n    });\n    return response.json();\n  } catch (err) {\n    return console.log(err);\n  }\n}; // export const getIdForPost = async postId => {\n//   try {\n//     const response = await fetch(\n//       `${process.env.REACT_APP_API_URL}/post/${postId}`,\n//       {\n//         method: \"GET\"\n//       }\n//     );\n//     return response.json();\n//   } catch (err) {\n//     return console.log(err);\n//   }\n// };\n// with pagination\n// export const list = async page => {\n//   try {\n//     const response = await fetch(`${process.env.REACT_APP_API_URL}/posts/?page=${page}`, {\n//       method: \"GET\"\n//     });\n//     return response.json();\n//   }\n//   catch (err) {\n//     return console.log(err);\n//   }\n// };\n\nexport const singlePost = async postId => {\n  try {\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/post/${postId}`, {\n      method: \"GET\"\n    });\n    return response.json();\n  } catch (err) {\n    return console.log(err);\n  }\n};\nexport const listByUser = async (userId, token) => {\n  try {\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/posts/by/${userId}`, {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.json();\n  } catch (err) {\n    return console.log(err);\n  }\n};\nexport const remove = async (postId, token) => {\n  try {\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/post/${postId}`, {\n      method: \"DELETE\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.json();\n  } catch (err) {\n    return console.log(err);\n  }\n};\nexport const update = async (postId, token, post) => {\n  try {\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/post/${postId}`, {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: post\n    });\n    return response.json();\n  } catch (err) {\n    return console.log(err);\n  }\n};\nexport const like = async (userId, token, postId) => {\n  try {\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/post/like`, {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        userId,\n        postId\n      })\n    });\n    return response.json();\n  } catch (err) {\n    return console.log(err);\n  }\n};\nexport const unlike = async (userId, token, postId) => {\n  try {\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/post/unlike`, {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        userId,\n        postId\n      })\n    });\n    return response.json();\n  } catch (err) {\n    return console.log(err);\n  }\n};\nexport const comment = async (userId, token, postId, comment) => {\n  try {\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/post/comment`, {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        userId,\n        postId,\n        comment\n      })\n    });\n    return response.json();\n  } catch (err) {\n    return console.log(err);\n  }\n};\nexport const uncomment = async (userId, token, postId, comment) => {\n  try {\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/post/uncomment`, {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        userId,\n        postId,\n        comment\n      })\n    });\n    return response.json();\n  } catch (err) {\n    return console.log(err);\n  }\n};","map":{"version":3,"sources":["/home/rk32/Apps/ReactJs/insta_challenge/client/src/apis/apiPost.js"],"names":["create","userId","token","post","response","fetch","process","env","REACT_APP_API_URL","method","headers","Accept","Authorization","body","json","err","console","log","list","singlePost","postId","listByUser","remove","update","like","JSON","stringify","unlike","comment","uncomment"],"mappings":"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","sourcesContent":["export const create = async (userId, token, post) => {\n    try {\n      const response = await fetch(\n        `${process.env.REACT_APP_API_URL}/post/new/${userId}`,\n        {\n          method: \"POST\",\n          headers: {\n            Accept: \"application/json\",\n            Authorization: `Bearer ${token}`\n          },\n          body: post\n        }\n      );\n      return response.json();\n    } catch (err) {\n      return console.log(err);\n    }\n  };\n  \n  export const list = async () => {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/posts`, {\n        method: \"GET\"\n      });\n      return response.json();\n    } catch (err) {\n      return console.log(err);\n    }\n  };\n  \n  // export const getIdForPost = async postId => {\n  //   try {\n  //     const response = await fetch(\n  //       `${process.env.REACT_APP_API_URL}/post/${postId}`,\n  //       {\n  //         method: \"GET\"\n  //       }\n  //     );\n  //     return response.json();\n  //   } catch (err) {\n  //     return console.log(err);\n  //   }\n  // };\n  \n  // with pagination\n  // export const list = async page => {\n  //   try {\n  //     const response = await fetch(`${process.env.REACT_APP_API_URL}/posts/?page=${page}`, {\n  //       method: \"GET\"\n  //     });\n  //     return response.json();\n  //   }\n  //   catch (err) {\n  //     return console.log(err);\n  //   }\n  // };\n  \n  export const singlePost = async postId => {\n    try {\n      const response = await fetch(\n        `${process.env.REACT_APP_API_URL}/post/${postId}`,\n        {\n          method: \"GET\"\n        }\n      );\n      return response.json();\n    } catch (err) {\n      return console.log(err);\n    }\n  };\n  \n  export const listByUser = async (userId, token) => {\n    try {\n      const response = await fetch(\n        `${process.env.REACT_APP_API_URL}/posts/by/${userId}`,\n        {\n          method: \"GET\",\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n          }\n        }\n      );\n      return response.json();\n    } catch (err) {\n      return console.log(err);\n    }\n  };\n  \n  export const remove = async (postId, token) => {\n    try {\n      const response = await fetch(\n        `${process.env.REACT_APP_API_URL}/post/${postId}`,\n        {\n          method: \"DELETE\",\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n          }\n        }\n      );\n      return response.json();\n    } catch (err) {\n      return console.log(err);\n    }\n  };\n  \n  export const update = async (postId, token, post) => {\n    try {\n      const response = await fetch(\n        `${process.env.REACT_APP_API_URL}/post/${postId}`,\n        {\n          method: \"PUT\",\n          headers: {\n            Accept: \"application/json\",\n            Authorization: `Bearer ${token}`\n          },\n          body: post\n        }\n      );\n      return response.json();\n    } catch (err) {\n      return console.log(err);\n    }\n  };\n  \n  export const like = async (userId, token, postId) => {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/post/like`, {\n        method: \"PUT\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({ userId, postId })\n      });\n      return response.json();\n    } catch (err) {\n      return console.log(err);\n    }\n  };\n  \n  export const unlike = async (userId, token, postId) => {\n    try {\n      const response = await fetch(\n        `${process.env.REACT_APP_API_URL}/post/unlike`,\n        {\n          method: \"PUT\",\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n          },\n          body: JSON.stringify({ userId, postId })\n        }\n      );\n      return response.json();\n    } catch (err) {\n      return console.log(err);\n    }\n  };\n  \n  export const comment = async (userId, token, postId, comment) => {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/post/comment`, {\n        method: \"PUT\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({ userId, postId, comment })\n      });\n      return response.json();\n    } catch (err) {\n      return console.log(err);\n    }\n  };\n  \n  export const uncomment = async (userId, token, postId, comment) => {\n    try {\n      const response = await fetch(\n        `${process.env.REACT_APP_API_URL}/post/uncomment`,\n        {\n          method: \"PUT\",\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n          },\n          body: JSON.stringify({ userId, postId, comment })\n        }\n      );\n      return response.json();\n    } catch (err) {\n      return console.log(err);\n    }\n  };"]},"metadata":{},"sourceType":"module"}