{"ast":null,"code":"var _jsxFileName = \"/home/rk32/Apps/ReactJs/insta_challenge/client/src/templates/ItemImage.js\";\nimport React from 'react';\nimport { Image, Dimensions } from 'react-native';\n\nclass ItemImage extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      imgWidth: undefined,\n      imgHeight: undefined,\n      isLoaded: false\n    };\n\n    this.resize = ({\n      nativeEvent: {\n        layout: {\n          width,\n          height\n        }\n      }\n    }) => {\n      this.setState({\n        width,\n        height,\n        isLoaded: true\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (!this.props.imageWidth) {\n      Image.getSize(this.props.source.uri, (imgWidth, imgHeight) => {\n        this.setState({\n          imgWidth,\n          imgHeight,\n          isLoaded: true\n        });\n      });\n    }\n  }\n\n  render() {\n    const {\n      imageWidth,\n      imageHeight,\n      source\n    } = this.props;\n    const fullWidth = this.state.width || Dimensions.get('window').width;\n    const imgW = imageWidth || this.state.imgWidth || fullWidth;\n    const imgH = imageHeight || this.state.imgHeight || imgW;\n    const aspectRatio = imgH / imgW;\n    const adjustedHeight = fullWidth * aspectRatio;\n    return /*#__PURE__*/React.createElement(Image, {\n      onLayout: this.resize,\n      style: {\n        resizeMode: 'contain',\n        height: adjustedHeight,\n        width: '100%',\n        opacity: this.state.isLoaded ? 1 : 0\n      },\n      source: source,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nexport default ItemImage;","map":{"version":3,"sources":["/home/rk32/Apps/ReactJs/insta_challenge/client/src/templates/ItemImage.js"],"names":["React","Image","Dimensions","ItemImage","PureComponent","state","imgWidth","undefined","imgHeight","isLoaded","resize","nativeEvent","layout","width","height","setState","componentDidMount","props","imageWidth","getSize","source","uri","render","imageHeight","fullWidth","get","imgW","imgH","aspectRatio","adjustedHeight","resizeMode","opacity"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,UAAhB,QAAkC,cAAlC;;AAEA,MAAMC,SAAN,SAAwBH,KAAK,CAACI,aAA9B,CAA4C;AAAA;AAAA;AAAA,SAC1CC,KAD0C,GAClC;AACNC,MAAAA,QAAQ,EAAEC,SADJ;AAENC,MAAAA,SAAS,EAAED,SAFL;AAGNE,MAAAA,QAAQ,EAAE;AAHJ,KADkC;;AAAA,SAa1CC,MAb0C,GAajC,CAAC;AACRC,MAAAA,WAAW,EAAE;AACXC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,KAAF;AAASC,UAAAA;AAAT;AADG;AADL,KAAD,KAIH;AACJ,WAAKC,QAAL,CAAc;AAAEF,QAAAA,KAAF;AAASC,QAAAA,MAAT;AAAiBL,QAAAA,QAAQ,EAAE;AAA3B,OAAd;AACD,KAnByC;AAAA;;AAM1CO,EAAAA,iBAAiB,GAAG;AAClB,QAAI,CAAC,KAAKC,KAAL,CAAWC,UAAhB,EAA4B;AAC1BjB,MAAAA,KAAK,CAACkB,OAAN,CAAc,KAAKF,KAAL,CAAWG,MAAX,CAAkBC,GAAhC,EAAqC,CAACf,QAAD,EAAWE,SAAX,KAAyB;AAC5D,aAAKO,QAAL,CAAc;AAAET,UAAAA,QAAF;AAAYE,UAAAA,SAAZ;AAAuBC,UAAAA,QAAQ,EAAE;AAAjC,SAAd;AACD,OAFD;AAGD;AACF;;AASDa,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEJ,MAAAA,UAAF;AAAcK,MAAAA,WAAd;AAA2BH,MAAAA;AAA3B,QAAsC,KAAKH,KAAjD;AACA,UAAMO,SAAS,GAAG,KAAKnB,KAAL,CAAWQ,KAAX,IAAoBX,UAAU,CAACuB,GAAX,CAAe,QAAf,EAAyBZ,KAA/D;AACA,UAAMa,IAAI,GAAGR,UAAU,IAAI,KAAKb,KAAL,CAAWC,QAAzB,IAAqCkB,SAAlD;AACA,UAAMG,IAAI,GAAGJ,WAAW,IAAI,KAAKlB,KAAL,CAAWG,SAA1B,IAAuCkB,IAApD;AACA,UAAME,WAAW,GAAGD,IAAI,GAAGD,IAA3B;AACA,UAAMG,cAAc,GAAGL,SAAS,GAAGI,WAAnC;AACA,wBACE,oBAAC,KAAD;AACE,MAAA,QAAQ,EAAE,KAAKlB,MADjB;AAEE,MAAA,KAAK,EAAE;AACLoB,QAAAA,UAAU,EAAE,SADP;AAELhB,QAAAA,MAAM,EAAEe,cAFH;AAGLhB,QAAAA,KAAK,EAAE,MAHF;AAILkB,QAAAA,OAAO,EAAE,KAAK1B,KAAL,CAAWI,QAAX,GAAsB,CAAtB,GAA0B;AAJ9B,OAFT;AAQE,MAAA,MAAM,EAAEW,MARV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAYD;;AAxCyC;;AA2C5C,eAAejB,SAAf","sourcesContent":["import React from 'react';\nimport { Image, Dimensions } from 'react-native';\n\nclass ItemImage extends React.PureComponent {\n  state = {\n    imgWidth: undefined,\n    imgHeight: undefined,\n    isLoaded: false,\n  };\n  componentDidMount() {\n    if (!this.props.imageWidth) {\n      Image.getSize(this.props.source.uri, (imgWidth, imgHeight) => {\n        this.setState({ imgWidth, imgHeight, isLoaded: true });\n      });\n    }\n  }\n  resize = ({\n    nativeEvent: {\n      layout: { width, height },\n    },\n  }) => {\n    this.setState({ width, height, isLoaded: true });\n  };\n\n  render() {\n    const { imageWidth, imageHeight, source } = this.props;\n    const fullWidth = this.state.width || Dimensions.get('window').width;\n    const imgW = imageWidth || this.state.imgWidth || fullWidth;\n    const imgH = imageHeight || this.state.imgHeight || imgW;\n    const aspectRatio = imgH / imgW;\n    const adjustedHeight = fullWidth * aspectRatio;\n    return (\n      <Image\n        onLayout={this.resize}\n        style={{\n          resizeMode: 'contain',\n          height: adjustedHeight,\n          width: '100%',\n          opacity: this.state.isLoaded ? 1 : 0,\n        }}\n        source={source}\n      />\n    );\n  }\n}\n\nexport default ItemImage;\n"]},"metadata":{},"sourceType":"module"}